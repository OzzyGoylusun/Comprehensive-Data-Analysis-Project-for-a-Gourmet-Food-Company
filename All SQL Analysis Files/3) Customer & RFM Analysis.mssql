
--3. Customer Analysis 


--CASE 3.1: How do the following critical pieces of information about customer spending look like per customer?

-- * Total Net Revenue 
-- * Average Amount Spent Per Order
-- * Total Number of Orders placed thus far
-- * Average Quantity ordered
-- * Average Discount obtained

WITH CONSOLIDATED_ORDER_REVENUE_DETAILS AS
	(
		SELECT SHIP_COUNTRY,
			CUSTOMER_ID,
			ORDER_ID,
			FREIGHT,
			SUM(CAST(CASE WHEN DISCOUNT = 0 THEN UNIT_PRICE * QUANTITY
					 ELSE UNIT_PRICE * QUANTITY * (1 - DISCOUNT)
					 END AS NUMERIC(10, 2))) AS TOTAL_DISCOUNTED_REVENUE_PER_ORDER,
			ROUND(AVG(QUANTITY), 2) AS AVERAGE_QUANTITY_PER_ORDER,
			AVG(DISCOUNT)::NUMERIC(10, 2) AS AVERAGE_DISCOUNT_PER_ORDER
	 
		FROM ORDERS AS O
		LEFT JOIN ORDER_DETAILS AS OD USING(ORDER_ID)
		GROUP BY 1, 2, 3, 4
	)
		
SELECT COMPANY_NAME AS CORPORATE_CUSTOMER_NAME,
	CITY,
	COUNTRY,
	CAST(SUM(TOTAL_DISCOUNTED_REVENUE_PER_ORDER) - SUM(FREIGHT) AS NUMERIC(10, 2)) AS TOTAL_NET_REVENUE,
	AVG(TOTAL_DISCOUNTED_REVENUE_PER_ORDER)::NUMERIC(10, 2) AS AVERAGE_AMOUNT_SPENT_PER_ORDER,
	COUNT(ORDER_ID) AS TOTAL_NUMBER_OF_ORDERS,
	ROUND(AVG(AVERAGE_QUANTITY_PER_ORDER), 0) AS AVERAGE_QUANTITY_ORDERED,
	ROUND(AVG(AVERAGE_DISCOUNT_PER_ORDER), 2) AS AVERAGE_DISCOUNT_OBTAINED
	
FROM CUSTOMERS AS C
INNER JOIN CONSOLIDATED_ORDER_REVENUE_DETAILS AS CORD USING(CUSTOMER_ID) --Inner Join to avoid customer info that have not placed any orders thus far
GROUP BY 1, 2, 3
ORDER BY 4 DESC, 5 DESC, 6 DESC



--CASE 3.2: What are the category, product names and the order frequency for each order type where customers' orders are concerned?

WITH CUSTOMER_CATEGORY_RANKINGS AS
	(
		WITH CUSTOMER_CATEGORY_PREFERENCES AS
			(
				SELECT COMPANY_NAME AS CORPORATE_CUSTOMER_NAME,
					CATEGORY_NAME,
					PRODUCT_NAME,
					COUNT(CATEGORY_NAME) OVER(PARTITION BY COMPANY_NAME, CATEGORY_NAME) AS CATEGORY_PREFERENCE
				
				FROM ORDERS
				LEFT JOIN CUSTOMERS USING(CUSTOMER_ID)
				LEFT JOIN ORDER_DETAILS USING(ORDER_ID)
				LEFT JOIN PRODUCTS USING(PRODUCT_ID)
				LEFT JOIN CATEGORIES USING(CATEGORY_ID)
			) 
		
		SELECT CORPORATE_CUSTOMER_NAME,
			CATEGORY_NAME,
			PRODUCT_NAME,
			DENSE_RANK() OVER(PARTITION BY CORPORATE_CUSTOMER_NAME ORDER BY CATEGORY_PREFERENCE DESC) AS CATEGORY_RANKING
		
		FROM CUSTOMER_CATEGORY_PREFERENCES
	)
		
SELECT CORPORATE_CUSTOMER_NAME,
	CATEGORY_NAME,
	PRODUCT_NAME,
	COUNT(PRODUCT_NAME) AS NUMBER_OF_PURCHASES
	
FROM CUSTOMER_CATEGORY_RANKINGS
WHERE CATEGORY_RANKING = 1
GROUP BY 1, 2, 3
ORDER BY 1, 2, 3



--CASE 3.3: RFM Analysis for each customer that has interacted with the e-commerce website

WITH CONSOLIDATED_CUSTOMERS_ORDERS_WITH_RFM_SCORING AS
	(
		WITH CONSOLIDATED_CUSTOMERS_ORDERS AS
			(
				SELECT ORDER_ID,
					CUSTOMER_ID,
					COMPANY_NAME,
					CITY,
					COUNTRY,
					MAX(ORDER_DATE) OVER(PARTITION BY CUSTOMER_ID) AS MOST_RECENT_DATE
				
				FROM CUSTOMERS AS C
				INNER JOIN ORDERS AS O USING(CUSTOMER_ID)),
			
		RECENCY AS
			(
				SELECT DISTINCT CUSTOMER_ID,
					COMPANY_NAME,
					CITY,
					COUNTRY,
					AGE(DATE('1998-05-07'),MOST_RECENT_DATE) AS TIME_ELAPSED_FROM_LAST_SHOPPING --1998-05-06 --Hence, we consider the next day as the most recent day

				FROM CONSOLIDATED_CUSTOMERS_ORDERS
			),
		
		FREQUENCY AS
			(
				SELECT CUSTOMER_ID,
					COUNT(ORDER_ID) AS TOTAL_NUMBER_OF_ORDERS
				FROM CONSOLIDATED_CUSTOMERS_ORDERS
				GROUP BY 1
			),
		
		MONETARY AS
			(
				WITH CONSOLIDATED_ORDER_REVENUE_DETAILS AS
					(
						SELECT CUSTOMER_ID,
							ORDER_ID,
							FREIGHT,
							SUM(CAST(CASE WHEN DISCOUNT = 0 THEN UNIT_PRICE * QUANTITY
									 ELSE UNIT_PRICE * QUANTITY * (1 - DISCOUNT)
									 END AS NUMERIC(10, 2))) AS TOTAL_GROSS_REVENUE_PER_ORDER
						
						FROM ORDERS AS O
						LEFT JOIN ORDER_DETAILS AS OD USING(ORDER_ID)
						GROUP BY 1, 2, 3
					) 
		
			SELECT CUSTOMER_ID,
			SUM(TOTAL_GROSS_REVENUE_PER_ORDER - FREIGHT)::NUMERIC(10,2) AS TOTAL_MONETARY_CONTRIBUTION
			FROM CONSOLIDATED_ORDER_REVENUE_DETAILS
			GROUP BY 1
			) 
		
	SELECT COMPANY_NAME,
			CITY,
			COUNTRY,
			TIME_ELAPSED_FROM_LAST_SHOPPING,
			TOTAL_NUMBER_OF_ORDERS,
			TOTAL_MONETARY_CONTRIBUTION,
			NTILE(5) OVER(ORDER BY TIME_ELAPSED_FROM_LAST_SHOPPING DESC)::CHAR AS RECENCY_SCORE,
			NTILE(5) OVER(ORDER BY TOTAL_NUMBER_OF_ORDERS ASC)::CHAR AS FREQUENCY_SCORE,
			NTILE(5) OVER(ORDER BY TOTAL_MONETARY_CONTRIBUTION ASC)::CHAR AS MONETARY_SCORE
		
		FROM RECENCY
		INNER JOIN FREQUENCY USING(CUSTOMER_ID)
		INNER JOIN MONETARY USING(CUSTOMER_ID)
		ORDER BY 7 DESC, 8 DESC, 9 DESC
	)
	
SELECT COMPANY_NAME,
	CITY,
	COUNTRY,
	TIME_ELAPSED_FROM_LAST_SHOPPING,
	TOTAL_NUMBER_OF_ORDERS,
	TOTAL_MONETARY_CONTRIBUTION,
	RECENCY_SCORE,
	FREQUENCY_SCORE,
	MONETARY_SCORE,
	RECENCY_SCORE || FREQUENCY_SCORE || MONETARY_SCORE AS RFM_CELL
	
FROM CONSOLIDATED_CUSTOMERS_ORDERS_WITH_RFM_SCORING
